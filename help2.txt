
RegEx:

 When you specify a RegEx pattern with the --r option, the regular
 express will be run against the original file name and the first
 match will be used to replace {{r}} in the output file name. If the
 regular expression fails to match, and empty string will be returned.
 DO NOT include the forward slashes in your RegEx pattern.

 Groups:
 You can write RegEx to capture one or more named groups and then
 use those groups in your output file name. If the RegEx groups do
 not return a match, the replacement variables in the output file
 name will be blank, so be sure to test with the --s option. See
 the third example below for how to use RegEx groups.

Examples:

 rename *.log {{y}}{{m}}{{d}}{{f}}
   node.log → 20170303node.log
   system.log → 20170303system.log

 rename *.log test
   node.log → test1.log
   system.log → test2.log

   note: the file index will prepend with zero(s) to keep file order
   the same when there are more than 9 files renamed.

 rename --r="- (?<month>[A-Za-z]+) (?<year>\d{4})" --noindex ExpenseReport*.pdf "{{year}} - {{month}} Expense Report"
   ExpenseReport - August 2016.pdf → 2016 - August Expense Report.pdf
   ExpenseReport - March 2015.pdf → 2015 - March Expense Report.pdf
   ExpenseReport - October 2015.pdf → 2015 - October Expense Report.pdf
